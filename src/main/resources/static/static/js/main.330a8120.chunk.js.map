{"version":3,"sources":["components/PrivateRoute.js","components/NavigationBar.js","components/LoginForm.js","util/BackendURL.ts","components/ProjectList.js","components/ProjectForm.js","components/CustomerList.js","components/CustomerForm.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["PrivateRoute","Component","component","rest","render","props","NavigationBar","Navbar","bg","variant","to","className","Toggle","aria-controls","Collapse","id","Nav","Text","localStorage","getItem","React","Project","loginChange","event","setState","target","name","value","state","email","password","bind","onSubmit","preventDefault","this","checkDetails","history","push","length","alert","Card","Header","Form","Body","Row","Group","as","Col","controlId","Label","Control","required","type","autoComplete","onChange","placeholder","Footer","Button","url","path","ProjectLista","deleteProject","projectId","window","confirm","axios","delete","then","response","status","projects","filter","project","get","data","Table","bordered","hover","striped","align","colSpan","sort","a","b","map","key","customer","orderDate","deadline","developmentArea","projectStatus","priority","projectLeader","onClick","size","initialState","customerId","developmentAreaId","projectStatusId","priorityId","statusId","description","projectChange","projectList","resetProject","customerList","developmentAreaList","projectStatusList","priorityList","statusList","findAllLists","match","params","findProjectById","findProjectIndexInArray","catch","error","console","array","i","job","skill","startDate","phoneNumber","lastLoginDate","editProject","addProject","post","put","Date","onReset","rows","CustomerList","deleteCustomer","customers","phone","website","zipCode","locality","streetAddress","CustomerForm","resetCustomer","customerChange","findCustomerById","editCustomer","addCustomer","App","Container","fluid","lg","exact","LoginForm","ProjectList","ProjectForm","NotFound","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.330a8120.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => (\r\n        // localStorage.getItem('user')\r\n        true ? <Component {...props} /> : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n    )} />\r\n)","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavigationBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Link to={\"/\"} className=\"navbar-brand\">\r\n                    Projektmenedzsment rendszer\r\n                </Link>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link to={\"/projects\"} className=\"nav-link\">Projektek</Link>\r\n                        <Link to={\"/customers\"} className=\"nav-link\">Megrendelők</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text>\r\n                        {localStorage.getItem('user') ? <span>Belépve : {localStorage.getItem('user')} | <Link to=\"/login\">Kijelentkezés</Link> </span> : <Link to=\"/login\">Bejelentkezés</Link>}\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React, { Component } from 'react';\r\nimport './LoginForm.css';\r\n// import { Link } from 'react-router-dom';\r\nimport { Card, Form, Button, Col } from 'react-bootstrap';\r\n// import axios from 'axios';\r\n// import { url } from '../util/BackendURL';\r\n// import { userService } from '../services/userService';\r\n\r\nexport default class Project extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // userService.logout();\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        };\r\n\r\n        this.loginChange = this.loginChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (this.checkDetails()) {\r\n            // const user = {\r\n            //     email: this.state.email,\r\n            //     password: this.state.password,\r\n            // }\r\n\r\n            // axios.post(url(\"api/project_manager/projects\"), project)\r\n            //     .then(response => {\r\n            //         if (response.status === 200) {\r\n            //             this.resetProject();\r\n            //             alert(\"A project elmentve!\");\r\n            //             this.projectList();\r\n            //         }\r\n            //     });\r\n            this.props.history.push(\"/projects\");\r\n        }\r\n    }\r\n\r\n    checkDetails() {\r\n        if (this.state.email.length < 5) {\r\n            alert(\"Az email nem lehet rövidebb 5 karakternél!\");\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    loginChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { email, password } = this.state;\r\n\r\n        return (\r\n            <Card id=\"loginFormContainer\" className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header> Bejelentkezés </Card.Header>\r\n                <Form onSubmit={this.onSubmit} id=\"projektForm\">\r\n                    <Card.Body>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formEmail\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"email\" name=\"email\"\r\n                                    value={email}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.loginChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg az email címed\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formPassword\">\r\n                                <Form.Label>Jelszó</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"password\" name=\"password\"\r\n                                    value={password}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.loginChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a jelszavad\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button variant=\"primary\" type=\"submit\">Bejelentkezés</Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card >\r\n        )\r\n    }\r\n}","const BACKEND_URL_DEV = 'http://localhost:8080';\r\n// const BACKEND_URL_PROD = 'https://pmrendszer.herokuapp.com';\r\n\r\nexport const url = (path: string): string => `${BACKEND_URL_DEV}/${path}`;","import React, { Component } from 'react';\r\nimport { Card, Table, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { url } from '../util/BackendURL';\r\n\r\nexport default class ProjectLista extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            projects: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(url(\"api/project_manager/projects\"))\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ projects: data }));\r\n    }\r\n\r\n    deleteProject = (projectId) => {\r\n        if (window.confirm('Biztosan törli a kiválasztott projektet?')) {\r\n            axios.delete(url(\"api/project_manager/projects/\" + projectId))\r\n                .then(response => {\r\n                    if (response.status === 200) {\r\n                        this.setState({\r\n                            projects: this.state.projects.filter(project => project.id !== projectId)\r\n                        });\r\n                        alert(\"A projekt törölve!\");\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <Card className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header>Projektek</Card.Header>\r\n                <Card.Body>\r\n                    <Link to={\"/projects/add\"}><Button variant=\"success\">Projekt hozzáadása</Button></Link>\r\n                    <Table className=\"marginTop\" bordered hover striped variant=\"dark\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Név</th>\r\n                                <th>Megrendelő</th>\r\n                                <th>Megrendelés dátuma</th>\r\n                                <th>Határidő dátuma</th>\r\n                                <th>Fejlesztési terület</th>\r\n                                <th>Projekt állapot</th>\r\n                                <th>Prioritás</th>\r\n                                <th>Projektvezető</th>\r\n                                <th>Státusz</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.projects.length === 0 ?\r\n                                    <tr align=\"center\">\r\n                                        <td colSpan=\"10\">Nincs elérhető projekt.</td>\r\n                                    </tr>\r\n                                    :\r\n                                    this.state.projects.sort((a, b) => a.id - b.id).map((project) => (\r\n                                        <tr key={project.id}>\r\n                                            <td>{project.name}</td>\r\n                                            <td>{project.customer.name}</td>\r\n                                            <td>{project.orderDate}</td>\r\n                                            <td>{project.deadline}</td>\r\n                                            <td>{project.developmentArea.name}</td>\r\n                                            <td>{project.projectStatus.name}</td>\r\n                                            <td>{project.priority.name}</td>\r\n                                            <td>{project.projectLeader.name}</td>\r\n                                            <td>{project.status.name}</td>\r\n                                            <td>\r\n                                                <Link to={\"projects/details/\" + project.id} className=\"mr-2 btn btn-sm btn-primary disable\">Információ</Link>\r\n                                                <Link to={\"projects/edit/\" + project.id} className=\"mr-2 btn btn-sm btn-primary\">Módosít</Link>\r\n                                                <Button variant=\"danger\" onClick={this.deleteProject.bind(this, project.id)} size=\"sm\">Töröl</Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './ProjectForm.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Form, Button, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { url } from '../util/BackendURL';\r\n\r\nexport default class Project extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            customerId: 1,\r\n            orderDate: '',\r\n            deadline: '',\r\n            developmentAreaId: 1,\r\n            projectStatusId: 1,\r\n            priorityId: 1,\r\n            statusId: 1,\r\n            description: '',\r\n            customerList: [],\r\n            developmentAreaList: [],\r\n            projectStatusList: [],\r\n            priorityList: [],\r\n            statusList: []\r\n        };\r\n\r\n        this.projectChange = this.projectChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: '', name: '', customerId: 1, orderDate: '', deadline: '', developmentAreaId: 1, projectStatusId: 1, priorityId: 1, statusId: 1, description: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.findAllLists();\r\n\r\n        const projectId = +this.props.match.params.id;\r\n        if (projectId) {\r\n            this.findProjectById(projectId);\r\n        }\r\n    }\r\n\r\n    findAllLists() {\r\n        axios.get(url(\"api/project_manager/customers\"))\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ customerList: data }));\r\n\r\n        axios.get(url(\"api/project_manager/development_areas\"))\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ developmentAreaList: data }));\r\n\r\n        axios.get(url(\"api/project_manager/project_statuses\"))\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ projectStatusList: data }));\r\n\r\n        axios.get(url(\"api/project_manager/priorities\"))\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ priorityList: data }));\r\n\r\n        axios.get(url(\"api/project_manager/statuses\"))\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ statusList: data }));\r\n    }\r\n\r\n    findProjectById(projectId) {\r\n        axios.get(url(\"api/project_manager/projects/id/\" + projectId))\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        name: response.data.name,\r\n                        customerId: this.findProjectIndexInArray(this.state.customerList, response.data.customer.id),\r\n                        orderDate: response.data.orderDate,\r\n                        deadline: response.data.deadline,\r\n                        developmentAreaId: this.findProjectIndexInArray(this.state.developmentAreaList, response.data.developmentArea.id),\r\n                        projectStatusId: this.findProjectIndexInArray(this.state.projectStatusList, response.data.projectStatus.id),\r\n                        priorityId: this.findProjectIndexInArray(this.state.priorityList, response.data.priority.id),\r\n                        statusId: this.findProjectIndexInArray(this.state.statusList, response.data.status.id),\r\n                        description: response.data.description\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Hiba - \" + error);\r\n            });\r\n    }\r\n\r\n    findProjectIndexInArray(array, id) {\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (array[i].id === id) {\r\n                return i + 1;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        const testProjectLeader = {\r\n            id: 1,\r\n            name: \"Horváth Krisztina\",\r\n            email: \"manager@gmail.com\",\r\n            job: {\r\n                id: 1,\r\n                name: \"Projektvezető\"\r\n            },\r\n            developmentArea: {\r\n                id: 1,\r\n                name: \"Asztali alkalmazás\"\r\n            },\r\n            skill: {\r\n                id: 4,\r\n                name: \"Senior\"\r\n            },\r\n            startDate: \"2020-01-31\",\r\n            phoneNumber: \"06701122345\",\r\n            lastLoginDate: \"2020-03-07 18:28:22\"\r\n        };\r\n\r\n        if (this.checkDetails()) {\r\n            const project = {\r\n                name: this.state.name,\r\n                customer: this.state.customerList[this.state.customerId - 1],\r\n                orderDate: this.state.orderDate,\r\n                deadline: this.state.deadline,\r\n                developmentArea: this.state.developmentAreaList[this.state.developmentAreaId - 1],\r\n                projectStatus: this.state.projectStatusList[this.state.projectStatusId - 1],\r\n                priority: this.state.priorityList[this.state.priorityId - 1],\r\n                projectLeader: testProjectLeader,\r\n                status: this.state.statusList[this.state.statusId - 1],\r\n                description: this.state.description\r\n            }\r\n\r\n            if (this.state.id) {\r\n                this.editProject(project);\r\n            } else {\r\n                this.addProject(project);\r\n            }\r\n        }\r\n    }\r\n\r\n    addProject(project) {\r\n        axios.post(url(\"api/project_manager/projects\"), project)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.resetProject();\r\n                    alert(\"A project elmentve!\");\r\n                    this.projectList();\r\n                }\r\n            });\r\n    }\r\n\r\n    editProject(project) {\r\n        axios.put(url(\"api/project_manager/projects/\" + this.state.id), project)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.resetProject();\r\n                    alert(\"A project elmentve!\");\r\n                    this.projectList();\r\n                }\r\n            });\r\n    }\r\n\r\n    checkDetails() {\r\n        if (this.state.name.length >= 5) {\r\n            if (new Date(this.state.orderDate) < new Date(this.state.deadline)) {\r\n                return true;\r\n            } else {\r\n                alert(\"A határidőnek késöbbi időpontnak kell lennie, mint a megrendelés dátumának!\");\r\n            }\r\n        } else {\r\n            alert(\"A projekt neve nem lehet rövidebb 5 karakternél!\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    projectChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    projectList = () => {\r\n        return this.props.history.push(\"/projects\");\r\n    }\r\n\r\n    resetProject = () => {\r\n        this.setState(() => this.initialState);\r\n    }\r\n\r\n    render() {\r\n        const { name, customerId, orderDate, deadline, developmentAreaId, projectStatusId, priorityId, statusId, description } = this.state;\r\n\r\n        return (\r\n            <Card id=\"projectFormContainer\" className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header> {this.state.id ? \"Projekt módosítása\" : \"Projekt hozzáadása\"} </Card.Header>\r\n                <Form onReset={this.resetProject} onSubmit={this.onSubmit} id=\"projektForm\">\r\n                    <Card.Body>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Projekt neve</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"name\"\r\n                                    value={name}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.projectChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a projekt nevét\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formCustomer\">\r\n                                <Form.Label>Megrendelő</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"}\r\n                                    as=\"select\" name=\"customerId\"\r\n                                    value={customerId}\r\n                                    onChange={this.projectChange}>\r\n                                    {\r\n                                        this.state.customerList.map((customer) => (\r\n                                            <option key={customer.id} value={customer.id}>\r\n                                                {customer.name}\r\n                                            </option>\r\n                                        ))\r\n                                    }\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formOrderDate\">\r\n                                <Form.Label>Megrendelés dátuma</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    value={orderDate}\r\n                                    onChange={this.projectChange}\r\n                                    type=\"date\"\r\n                                    className={\"bg-dark text-white\"}\r\n                                    name=\"orderDate\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formDeadline\">\r\n                                <Form.Label>Határidő dátuma</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    value={deadline}\r\n                                    onChange={this.projectChange}\r\n                                    type=\"date\"\r\n                                    className={\"bg-dark text-white\"}\r\n                                    name=\"deadline\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formDevelopmentArea\">\r\n                                <Form.Label>Fejlesztési terület</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"} as=\"select\" name=\"developmentAreaId\"\r\n                                    value={developmentAreaId}\r\n                                    onChange={this.projectChange}>\r\n                                    {this.state.developmentAreaList.map((developmentArea) => (\r\n                                        <option key={developmentArea.id} value={developmentArea.id}>\r\n                                            {developmentArea.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formProjectStatus\">\r\n                                <Form.Label>Projekt állapot</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"} as=\"select\" name=\"projectStatusId\"\r\n                                    value={projectStatusId}\r\n                                    onChange={this.projectChange}>\r\n                                    {this.state.projectStatusList.map((projectStatus) => (\r\n                                        <option key={projectStatus.id} value={projectStatus.id}>\r\n                                            {projectStatus.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formPriority\">\r\n                                <Form.Label>Prioritás</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"} as=\"select\" name=\"priorityId\"\r\n                                    value={priorityId}\r\n                                    onChange={this.projectChange}\r\n                                >\r\n                                    {this.state.priorityList.map((priority) => (\r\n                                        <option key={priority.id} value={priority.id}>\r\n                                            {priority.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formStatus\">\r\n                                <Form.Label>Státusz</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"} as=\"select\" name=\"statusId\"\r\n                                    value={statusId}\r\n                                    onChange={this.projectChange}\r\n                                >\r\n                                    {this.state.statusList.map((status) => (\r\n                                        <option key={status.id} value={status.id}>\r\n                                            {status.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formDescription\">\r\n                                <Form.Label>Projekt leírása</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"10\"\r\n                                    value={description}\r\n                                    onChange={this.projectChange}\r\n                                    placeholder=\"Add meg a projekt leírását.\"\r\n                                    className={\"bg-dark text-white\"}\r\n                                    name=\"description\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Link to={\"/projects\"}><Button variant=\"primary\">Vissza</Button></Link>\r\n                        <div className=\"formButtonsRight\">\r\n                            <Button size=\"bg\" variant=\"success\" type=\"submit\">Mentés</Button>\r\n                            {this.state.id ? null : <Button className=\"defaultButtonMarginLeft\" size=\"bg\" variant=\"info\" type=\"reset\">Alaphelyzet</Button>}\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card >\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Card, Table, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { url } from '../util/BackendURL';\r\n\r\nexport default class CustomerList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            customers: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(url(\"api/project_manager/customers\"))\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ customers: data }));\r\n    }\r\n\r\n    deleteCustomer = (customerId) => {\r\n        axios.delete(url(\"api/project_manager/customers/\" + customerId))\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    alert(\"A megrendelő törölve!\");\r\n                    this.setState({\r\n                        customers: this.state.customers.filter(customer => customer.id !== customerId)\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header>Megrendelők</Card.Header>\r\n                <Card.Body>\r\n                    <Link to={\"/customers/add\"}><Button variant=\"success\">Megrendelő hozzáadása</Button></Link>\r\n                    <Table className=\"marginTop\" bordered hover striped variant=\"dark\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Név</th>\r\n                                <th>Telefonszám</th>\r\n                                <th>E-mail</th>\r\n                                <th>Weboldal</th>\r\n                                <th>Irányítószám</th>\r\n                                <th>Helység</th>\r\n                                <th>Utca, házszám</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.customers.length === 0 ?\r\n                                    <tr align=\"center\">\r\n                                        <td colSpan=\"10\">Nincs elérhető megrendelő.</td>\r\n                                    </tr> :\r\n                                    this.state.customers.sort((a, b) => a.id - b.id).map((customer) => (\r\n                                        <tr key={customer.id}>\r\n                                            <td>{customer.name}</td>\r\n                                            <td>{customer.phone}</td>\r\n                                            <td>{customer.email}</td>\r\n                                            <td>{customer.website}</td>\r\n                                            <td>{customer.zipCode}</td>\r\n                                            <td>{customer.locality}</td>\r\n                                            <td>{customer.streetAddress}</td>\r\n                                            <td>\r\n                                                <Link to={\"customers/edit/\" + customer.id} className=\"mr-2 btn btn-sm btn-primary\">Módosít</Link>\r\n                                                <Button variant=\"danger\" onClick={this.deleteCustomer.bind(this, customer.id)} size=\"sm\">Töröl</Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './CustomerForm.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Form, Button, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { url } from '../util/BackendURL';\r\n\r\nexport default class CustomerForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            phone: '',\r\n            email: '',\r\n            website: '',\r\n            zipCode: '',\r\n            locality: '',\r\n            streetAddress: ''\r\n        };\r\n\r\n        this.customerChange = this.customerChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: '', name: '', phone: '', email: '', website: '', zipCode: '', locality: '', streetAddress: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        const customerId = +this.props.match.params.id;\r\n        if (customerId) {\r\n            this.findCustomerById(customerId);\r\n        }\r\n    }\r\n\r\n    findCustomerById(customerId) {\r\n        axios.get(url(\"api/project_manager/customers/id/\" + customerId))\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        name: response.data.name,\r\n                        phone: response.data.phone,\r\n                        email: response.data.email,\r\n                        website: response.data.website,\r\n                        zipCode: response.data.zipCode,\r\n                        locality: response.data.locality,\r\n                        streetAddress: response.data.streetAddress\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Hiba - \" + error);\r\n            });\r\n    }\r\n\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (this.checkDetails()) {\r\n            const customer = {\r\n                name: this.state.name,\r\n                phone: this.state.phone,\r\n                email: this.state.email,\r\n                website: this.state.website,\r\n                zipCode: this.state.zipCode,\r\n                locality: this.state.locality,\r\n                streetAddress: this.state.streetAddress,\r\n            }\r\n\r\n            if (this.state.id) {\r\n                this.editCustomer(customer);\r\n            } else {\r\n                this.addCustomer(customer);\r\n            }\r\n        }\r\n    }\r\n\r\n    addCustomer(customer) {\r\n        axios.post(url(\"api/project_manager/customers\"), customer)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.resetCustomer();\r\n                    alert(\"A megrendelő elmentve!\");\r\n                    this.customerList();\r\n                }\r\n            });\r\n    }\r\n\r\n    editCustomer(customer) {\r\n        axios.put(url(\"api/project_manager/customers/\" + this.state.id), customer)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.resetCustomer();\r\n                    alert(\"A megrendelő elmentve!\");\r\n                    this.customerList();\r\n                }\r\n            });\r\n    }\r\n\r\n    checkDetails() {\r\n        if (this.state.name.length >= 5) {\r\n            if (this.state.phone.length >= 5) {\r\n                if (this.state.email.length >= 5) {\r\n                    if (this.state.website.length >= 5) {\r\n                        if (this.state.zipCode.length >= 3) {\r\n                            if (this.state.locality.length >= 3) {\r\n                                if (this.state.streetAddress.length >= 5) {\r\n                                    return true;\r\n                                } else {\r\n                                    alert(\"Az utca, házszám nem lehet rövidebb 5 karakternél!\");\r\n                                }\r\n                            } else {\r\n                                alert(\"A helység neve nem lehet rövidebb 3 karakternél!\");\r\n                            }\r\n                        } else {\r\n                            alert(\"Az irányítószám nem lehet rövidebb 3 karakternél!\");\r\n                        }\r\n                    } else {\r\n                        alert(\"A weboldal nem lehet rövidebb 5 karakternél!\");\r\n                    }\r\n                } else {\r\n                    alert(\"Az email nem lehet rövidebb 5 karakternél!\");\r\n                }\r\n            } else {\r\n                alert(\"A telefonszám nem lehet rövidebb 5 karakternél!\");\r\n            }\r\n        } else {\r\n            alert(\"A név nem lehet rövidebb 5 karakternél!\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    customerChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    resetCustomer = () => {\r\n        this.setState(() => this.initialState);\r\n    }\r\n\r\n    customerList = () => {\r\n        return this.props.history.push(\"/customers\");\r\n    }\r\n\r\n    render() {\r\n        const { name, phone, email, website, zipCode, locality, streetAddress } = this.state;\r\n\r\n        return (\r\n            <Card id=\"customerFormContainer\" className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header>{this.state.id ? \"Megrendelő módosítása\" : \"Megrendelő hozzáadása\"}</Card.Header>\r\n                <Form onReset={this.resetCustomer} onSubmit={this.onSubmit} id=\"customerForm\">\r\n                    <Card.Body>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő neve</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"name\" value={name}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő nevét\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő telefonszáma</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"phone\" value={phone}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő telefonszámát\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő email címe</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"email\" value={email}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő email címét\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő weboldala</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"website\" value={website}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő weboldalát\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő irányítószáma</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"zipCode\" value={zipCode}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő irányítószámát\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Helység neve</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"locality\" value={locality}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a helység nevét\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Utca, házszám</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"streetAddress\" value={streetAddress}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg az utcát és a házszámot\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Link to={\"/customers\"}><Button variant=\"primary\">Vissza</Button></Link>\r\n                        <div className=\"formButtonsRight\">\r\n                            <Button size=\"bg\" variant=\"success\" type=\"submit\">Mentés</Button>\r\n                            {this.state.id ? null : <Button className=\"defaultButtonMarginLeft\" size=\"bg\" variant=\"info\" type=\"reset\">Alaphelyzet</Button>}\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card >\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './NotFound.css';\r\n\r\nexport default class Project extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"notFound\">\r\n                <h1>A keresett oldal nem található!</h1>\r\n                <h3>\r\n                    <Link to=\"/projects\">Vissza a főoldalra</Link>\r\n                </h3>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { PrivateRoute } from './components/PrivateRoute'\nimport NavigationBar from './components/NavigationBar';\nimport LoginForm from './components/LoginForm';\nimport ProjectList from './components/ProjectList';\nimport ProjectForm from './components/ProjectForm';\n// import ProjectDetails from './components/ProjectDetails';\nimport CustomerList from './components/CustomerList';\nimport CustomerForm from './components/CustomerForm';\nimport NotFound from './components/NotFound'\n\nfunction App() {\n  return (\n    <Router>\n      <NavigationBar />\n      <Container className=\"marginTop\" fluid={true}>\n        <Row>\n          <Col lg={12}>\n            <Switch>\n              <Route path=\"/login\" exact component={LoginForm} />\n              <PrivateRoute path={[\"/\", \"/projects\"]} exact component={ProjectList} />\n              <PrivateRoute path=\"/projects/add\" exact component={ProjectForm} />\n              <PrivateRoute path=\"/projects/edit/:id\" exact component={ProjectForm} />\n              {/* <PrivateRoute path=\"/projects/details/:id\" exact component={ProjectDetails} /> */}\n              <PrivateRoute path=\"/customers\" exact component={CustomerList} />\n              <PrivateRoute path=\"/customers/add\" exact component={CustomerForm} />\n              <PrivateRoute path=\"/customers/edit/:id\" exact component={CustomerForm} />\n              <Route exact component={NotFound} />\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}