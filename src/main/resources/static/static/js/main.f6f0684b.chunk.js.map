{"version":3,"sources":["components/NavigationBar.js","components/Project.js","components/ProjectList.js","components/CustomerList.js","components/Customer.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","variant","to","className","Toggle","aria-controls","Collapse","id","Nav","Text","href","React","Component","Project","props","initialState","name","customer","orderDate","deadline","developmentArea","projectStatus","priority","status","description","findAllLists","axios","get","then","response","data","lists","customerList","developmentAreaList","projectStatusList","priorityList","statusList","findProjectById","projectId","setState","catch","error","console","resetProject","submitProject","event","preventDefault","project","state","post","alert","updateProject","put","projectList","projectChange","target","value","getObject","log","history","push","list","index","length","getIndex","object","bind","this","match","params","Card","style","width","margin","Header","Form","onReset","onSubmit","Body","Row","Group","as","Col","controlId","Label","Control","required","type","autoComplete","onChange","placeholder","map","key","rows","Footer","Button","size","marginLeft","ProjectLista","deleteProject","delete","projects","filter","disabled","Table","bordered","hover","striped","marginTop","align","colSpan","projectLeader","onClick","CustomerList","deleteCustomer","customerId","customers","phone","email","website","zipCode","locality","streetAddress","Customer","resetCustomer","submitCustomer","updateCustomer","customerChange","App","Container","fluid","lg","path","exact","component","ProjectList","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f6f0684b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavigationBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Link to={\"/\"} className=\"navbar-brand\">\r\n                    Projektmenedzsment rendszer\r\n                </Link>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link to={\"/projects\"} className=\"nav-link\">Projektek</Link>\r\n                        <Link to={\"/customers\"} className=\"nav-link\">Megrendelők</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text>\r\n                        Belépve: <a href=\"/\"> Viktor</a>\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Form, Button, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nexport default class Project extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.lists = {\r\n            customerList: [],\r\n            developmentAreaList: [],\r\n            projectStatusList: [],\r\n            priorityList: [],\r\n            statusList: []\r\n        };\r\n        this.findAllLists();\r\n        this.projectChange = this.projectChange.bind(this);\r\n        this.submitProject = this.submitProject.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: '', name: '', customer: {}, orderDate: '', deadline: '', developmentArea: {}, projectStatus: {}, priority: {}, status: {}, description: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        const projectId = +this.props.match.params.id;\r\n        if (projectId) {\r\n            this.findProjectById(projectId);\r\n        }\r\n    }\r\n\r\n    findAllLists = () => {\r\n        axios.get(\"http://localhost:8080/api/project_manager/customers\")\r\n            .then(response => response.data)\r\n            .then((data) => this.lists.customerList = data);\r\n\r\n        axios.get(\"http://localhost:8080/api/project_manager/development_areas\")\r\n            .then(response => response.data)\r\n            .then((data) => this.lists.developmentAreaList = data);\r\n\r\n        axios.get(\"http://localhost:8080/api/project_manager/project_statuses\")\r\n            .then(response => response.data)\r\n            .then((data) => this.lists.projectStatusList = data);\r\n\r\n        axios.get(\"http://localhost:8080/api/project_manager/priorities\")\r\n            .then(response => response.data)\r\n            .then((data) => this.lists.priorityList = data);\r\n\r\n        axios.get(\"http://localhost:8080/api/project_manager/statuses\")\r\n            .then(response => response.data)\r\n            .then((data) => this.lists.statusList = data);\r\n    }\r\n\r\n    findProjectById = (projectId) => {\r\n        axios.get(\"http://localhost:8080/api/project_manager/projects/id/\" + projectId)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        name: response.data.name,\r\n                        customer: response.data.customer,\r\n                        orderDate: response.data.orderDate,\r\n                        deadline: response.data.deadline,\r\n                        developmentArea: response.data.developmentArea,\r\n                        projectStatus: response.data.projectStatus,\r\n                        priority: response.data.priority,\r\n                        status: response.data.status,\r\n                        description: response.data.description\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Hiba - \" + error);\r\n            });\r\n    }\r\n\r\n    resetProject = () => {\r\n        this.setState(() => this.initialState);\r\n    }\r\n\r\n    submitProject = (event) => {\r\n        event.preventDefault();\r\n\r\n        const project = {\r\n            name: this.state.name,\r\n            customer: this.state.customer,\r\n            orderDate: this.state.orderDate,\r\n            deadline: this.state.deadline,\r\n            developmentArea: this.state.developmentArea,\r\n            projectStatus: this.state.projectStatus,\r\n            priority: this.state.priority,\r\n            status: this.state.status,\r\n            description: this.state.description\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/project_manager/projects\", project)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState(this.initialState);\r\n                    alert(\"A project elmentve!\");\r\n                }\r\n            });\r\n    }\r\n\r\n    updateProject = (event) => {\r\n        event.preventDefault();\r\n\r\n        const project = {\r\n            name: this.state.name,\r\n            customer: this.state.customer,\r\n            orderDate: this.state.orderDate,\r\n            deadline: this.state.deadline,\r\n            developmentArea: this.state.developmentArea,\r\n            projectStatus: this.state.projectStatus,\r\n            priority: this.state.priority,\r\n            status: this.state.status,\r\n            description: this.state.description\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/project_manager/projects/\" + this.state.id, project)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState(this.initialState);\r\n                    alert(\"A project elmentve!\");\r\n                    this.projectList();\r\n                }\r\n            });\r\n    }\r\n\r\n    projectChange = (event) => {\r\n        this.setState({\r\n            name: event.target.value,\r\n            customer: this.getObject(this.lists.customerList, event.target.value),\r\n            orderDate: event.target.value,\r\n            deadline: event.target.value,\r\n            developmentArea: this.getObject(this.lists.developmentAreaList, event.target.value),\r\n            projectStatus: this.getObject(this.lists.projectStatusList, event.target.value),\r\n            priority: this.getObject(this.lists.priorityList, event.target.value),\r\n            status: this.getObject(this.lists.statusList, event.target.value),\r\n            description: event.target.value\r\n        });\r\n        console.log(this.state);\r\n    }\r\n\r\n    projectList = () => {\r\n        return this.props.history.push(\"/projects\");\r\n    }\r\n\r\n    getObject = (list, id) => {\r\n        for (let index = 0; index < list.length; index++) {\r\n            if (list[index].id === id) {\r\n                return list[index];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getIndex = (list, object) => {\r\n        for (let index = 0; index < list.length; index++) {\r\n            if (list[index].id === object.id) {\r\n                return index + 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n        const { name, orderDate, deadline, description } = this.state;\r\n\r\n        return (\r\n            <Card style={{ width: \"75%\", margin: \"0px auto\" }} className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header> {this.state.id ? \"Projekt módosítása\" : \"Projekt hozzáadása\"} </Card.Header>\r\n                <Form onReset={this.resetProject} onSubmit={this.state.id ? this.updateProject : this.submitProject} id=\"projektForm\">\r\n                    <Card.Body>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Projekt neve</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"name\" value={name}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.projectChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a projekt nevét\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formCustomer\">\r\n                                <Form.Label>Megrendelő</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"}\r\n                                    as=\"select\" name=\"customer\" value={this.getIndex(this.lists.customerList, this.state.customer)}\r\n                                    onChange={this.projectChange}>\r\n                                    {this.lists.customerList.map((customer) => (\r\n                                        <option key={customer.id} value={customer.id}>\r\n                                            {customer.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formOrderDate\">\r\n                                <Form.Label>Megrendelés dátuma</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    value={orderDate}\r\n                                    onChange={this.projectChange}\r\n                                    type=\"date\"\r\n                                    className={\"bg-dark text-white\"}\r\n                                    name=\"orderDate\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formDeadline\">\r\n                                <Form.Label>Határidő dátuma</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    value={deadline}\r\n                                    onChange={this.projectChange}\r\n                                    type=\"date\"\r\n                                    className={\"bg-dark text-white\"}\r\n                                    name=\"deadline\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formDevelopmentArea\">\r\n                                <Form.Label>Fejlesztési terület</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"} as=\"select\" name=\"developmentArea\" value={this.getIndex(this.lists.developmentAreaList, this.state.developmentArea)}\r\n                                    onChange={this.projectChange}>\r\n                                    {this.lists.developmentAreaList.map((developmentArea) => (\r\n                                        <option key={developmentArea.id} value={developmentArea.id}>\r\n                                            {developmentArea.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formProjectStatus\">\r\n                                <Form.Label>Projekt állapot</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"} as=\"select\" name=\"projectStatus\" value={this.getIndex(this.lists.projectStatusList, this.state.projectStatus)}\r\n                                    onChange={this.projectChange}>\r\n                                    {this.lists.projectStatusList.map((projectStatus) => (\r\n                                        <option key={projectStatus.id} value={projectStatus.id}>\r\n                                            {projectStatus.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formPriority\">\r\n                                <Form.Label>Prioritás</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"} as=\"select\" name=\"priority\" value={this.getIndex(this.lists.priorityList, this.state.priority)}\r\n                                    onChange={this.projectChange}>\r\n                                    {this.lists.priorityList.map((priority) => (\r\n                                        <option key={priority.id} value={priority.id}>\r\n                                            {priority.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formStatus\">\r\n                                <Form.Label>Státusz</Form.Label>\r\n                                <Form.Control className={\"bg-dark text-white\"} as=\"select\" name=\"status\" value={this.getIndex(this.lists.statusList, this.state.status)}\r\n                                    onChange={this.projectChange}>\r\n                                    {this.lists.statusList.map((status) => (\r\n                                        <option key={status.id} value={status.id}>\r\n                                            {status.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formDescription\">\r\n                                <Form.Label>Projekt leírása</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"10\"\r\n                                    value={description}\r\n                                    onChange={this.projectChange}\r\n                                    placeholder=\"Add meg a projekt leírását.\"\r\n                                    className={\"bg-dark text-white\"}\r\n                                    name=\"description\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Link to={\"/projects\"}><Button variant=\"primary\">Vissza</Button></Link>\r\n                        <div style={{ \"display\": \"inline\", \"float\": \"right\" }}>\r\n                            <Button size=\"bg\" variant=\"success\" type=\"submit\">Mentés</Button>\r\n                            <Button style={{ marginLeft: \"10px\" }} size=\"bg\" variant=\"info\" type=\"reset\">Alaphelyzet</Button>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card >\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Card, Table, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport default class ProjectLista extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            projects: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"/api/project_manager/projects\")\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ projects: data }));\r\n    }\r\n\r\n    deleteProject = (projectId) => {\r\n        axios.delete(\"/api/project_manager/projects/\" + projectId)\r\n            .then(response => {\r\n                if (response.data != null) {\r\n                    alert(\"A projekt törölve!\");\r\n                    this.setState({\r\n                        projects: this.state.projects.filter(project => project.id !== projectId)\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header>Projektek</Card.Header>\r\n                <Card.Body>\r\n                    <Link to={\"/projects/add\"}><Button variant=\"success\" disabled>Projekt hozzáadása</Button></Link>\r\n                    <Table bordered hover striped variant=\"dark\" style={{ marginTop: \"20px\" }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Név</th>\r\n                                <th>Megrendelő</th>\r\n                                <th>Megrendelés dátuma</th>\r\n                                <th>Határidő dátuma</th>\r\n                                <th>Fejlesztési terület</th>\r\n                                <th>Projekt állapot</th>\r\n                                <th>Prioritás</th>\r\n                                <th>Projektvezető</th>\r\n                                <th>Státusz</th>\r\n                                <th>Gombok</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.projects.length === 0 ?\r\n                                    <tr align=\"center\">\r\n                                        <td colSpan=\"10\">Nincs elérhető projekt.</td>\r\n                                    </tr> :\r\n                                    this.state.projects.map((project) => (\r\n                                        <tr key={project.id}>\r\n                                            <td>{project.name}</td>\r\n                                            <td>{project.customer.name}</td>\r\n                                            <td>{project.developmentArea.name}</td>\r\n                                            <td>{project.orderDate}</td>\r\n                                            <td>{project.deadline}</td>\r\n                                            <td>{project.projectStatus.name}</td>\r\n                                            <td>{project.priority.name}</td>\r\n                                            <td>{project.projectLeader.name}</td>\r\n                                            <td>{project.status.name}</td>\r\n                                            <td>\r\n                                                <Link to={\"projects/edit/\" + project.id} className=\"mr-2 btn btn-sm btn-primary disabled\">Módosít</Link>\r\n                                                <Button variant=\"danger\" onClick={this.deleteProject.bind(this, project.id)} size=\"sm\">Töröl</Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Card, Table, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport default class CustomerList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            customers: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"/api/project_manager/customers\")\r\n            .then(response => response.data)\r\n            .then((data) => this.setState({ customers: data }));\r\n    }\r\n\r\n    deleteCustomer = (customerId) => {\r\n        axios.delete(\"/api/project_manager/customers/\" + customerId)\r\n            .then(response => {\r\n                if (response.data != null) {\r\n                    alert(\"A megrendelő törölve!\");\r\n                    this.setState({\r\n                        customers: this.state.customers.filter(customer => customer.id !== customerId)\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header>Megrendelők</Card.Header>\r\n                <Card.Body>\r\n                    <Link to={\"/customers/add\"}><Button variant=\"success\">Megrendelő hozzáadása</Button></Link>\r\n                    <Table bordered hover striped variant=\"dark\" style={{ marginTop: \"20px\" }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Név</th>\r\n                                <th>Telefonszám</th>\r\n                                <th>E-mail</th>\r\n                                <th>Weboldal</th>\r\n                                <th>Irányítószám</th>\r\n                                <th>Helység</th>\r\n                                <th>Utca, házszám</th>\r\n                                <th>Gombok</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.customers.length === 0 ?\r\n                                    <tr align=\"center\">\r\n                                        <td colSpan=\"10\">Nincs elérhető megrendelő.</td>\r\n                                    </tr> :\r\n                                    this.state.customers.map((customer) => (\r\n                                        <tr key={customer.id}>\r\n                                            <td>{customer.name}</td>\r\n                                            <td>{customer.phone}</td>\r\n                                            <td>{customer.email}</td>\r\n                                            <td>{customer.website}</td>\r\n                                            <td>{customer.zipCode}</td>\r\n                                            <td>{customer.locality}</td>\r\n                                            <td>{customer.streetAddress}</td>\r\n                                            <td>\r\n                                                <Link to={\"customers/edit/\" + customer.id} className=\"mr-2 btn btn-sm btn-primary\">Módosít</Link>\r\n                                                <Button variant=\"danger\" onClick={this.deleteCustomer.bind(this, customer.id)} size=\"sm\">Töröl</Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Form, Button, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nexport default class Customer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.customerChange = this.customerChange.bind(this);\r\n        this.submitCustomer = this.submitCustomer.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: '', name: '', phone: '', email: '', website: '', zipCode: '', locality: '', streetAddress: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        const customerId = +this.props.match.params.id;\r\n        if (customerId) {\r\n            this.findProjectById(customerId);\r\n        }\r\n    }\r\n\r\n    findProjectById = (customerId) => {\r\n        axios.get(\"/api/project_manager/customers/id/\" + customerId)\r\n            .then(response => {\r\n                if (response.data != null) {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        name: response.data.name,\r\n                        phone: response.data.phone,\r\n                        email: response.data.email,\r\n                        website: response.data.website,\r\n                        zipCode: response.data.zipCode,\r\n                        locality: response.data.locality,\r\n                        streetAddress: response.data.streetAddress\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Hiba - \" + error);\r\n            });\r\n    }\r\n\r\n    resetCustomer = () => {\r\n        this.setState(() => this.initialState);\r\n    }\r\n\r\n    submitCustomer = (event) => {\r\n        event.preventDefault();\r\n\r\n        const customer = {\r\n            name: this.state.name,\r\n            phone: this.state.phone,\r\n            email: this.state.email,\r\n            website: this.state.website,\r\n            zipCode: this.state.zipCode,\r\n            locality: this.state.locality,\r\n            streetAddress: this.state.streetAddress,\r\n        }\r\n\r\n        axios.post(\"/api/project_manager/customers\", customer)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState(this.initialState);\r\n                    alert(\"A megrendelő elmentve!\");\r\n                }\r\n            });\r\n    }\r\n\r\n    updateCustomer = (event) => {\r\n        event.preventDefault();\r\n\r\n        const customer = {\r\n            name: this.state.name,\r\n            phone: this.state.phone,\r\n            email: this.state.email,\r\n            website: this.state.website,\r\n            zipCode: this.state.zipCode,\r\n            locality: this.state.locality,\r\n            streetAddress: this.state.streetAddress,\r\n        }\r\n\r\n        axios.put(\"/api/project_manager/customers/\" + this.state.id, customer)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState(this.initialState);\r\n                    alert(\"A megrendelő elmentve!\");\r\n                    this.customerList();\r\n                }\r\n            });\r\n    }\r\n\r\n    customerChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    customerList = () => {\r\n        return this.props.history.push(\"/customers\");\r\n    }\r\n\r\n    render() {\r\n        const { name, phone, email, website, zipCode, locality, streetAddress } = this.state;\r\n\r\n        return (\r\n            <Card style={{ width: \"75%\", margin: \"0px auto\" }} className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header>{this.state.id ? \"Megrendelő módosítása\" : \"Megrendelő hozzáadása\"}</Card.Header>\r\n                <Form onReset={this.resetCustomer} onSubmit={this.state.id ? this.updateCustomer : this.submitCustomer} id=\"customerForm\">\r\n                    <Card.Body>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő neve</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"name\" value={name}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő nevét\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő telefonszáma</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"phone\" value={phone}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő telefonszámát\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő email címe</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"email\" value={email}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő email címét\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő weboldala</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"website\" value={website}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő weboldalát\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Megrendelő irányítószáma</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"zipCode\" value={zipCode}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a megrendelő irányítószámát\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Helység neve</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"locality\" value={locality}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg a helység nevét\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formName\">\r\n                                <Form.Label>Utca, házszám</Form.Label>\r\n                                <Form.Control required\r\n                                    type=\"text\" name=\"streetAddress\" value={streetAddress}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={this.customerChange}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder=\"Add meg az utcát és a házszámot\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Link to={\"/customers\"}><Button variant=\"primary\">Vissza</Button></Link>\r\n                        <div style={{ \"display\": \"inline\", \"float\": \"right\" }}>\r\n                            <Button size=\"bg\" variant=\"success\" type=\"submit\">Mentés</Button>\r\n                            <Button style={{ marginLeft: \"10px\" }} size=\"bg\" variant=\"info\" type=\"reset\">Alaphelyzet</Button>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card >\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport NavigationBar from './components/NavigationBar';\nimport Project from './components/Project';\nimport ProjectList from './components/ProjectList';\nimport CustomerList from './components/CustomerList';\nimport Customer from './components/Customer';\n\nfunction App() {\n  const marginTop = {\n    marginTop: \"20px\"\n  };\n\n  return (\n    <Router>\n      <NavigationBar />\n      <Container fluid={true}>\n        <Row>\n          <Col lg={12} style={marginTop}>\n            <Switch>\n              <Route path=\"/\" exact component={ProjectList} />\n              <Route path=\"/projects\" exact component={ProjectList} />\n              <Route path=\"/projects/add\" exact component={Project} />\n              <Route path=\"/projects/edit/:id\" exact component={Project} />\n              <Route path=\"/customers\" exact component={CustomerList} />\n              <Route path=\"/customers/add\" exact component={Customer} />\n              <Route path=\"/customers/edit/:id\" exact component={Customer} />\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}